{"version":3,"sources":["../src/providers/remoteAttestationProvider.ts","../src/providers/deriveKeyProvider.ts","../src/index.ts"],"sourcesContent":["import { IAgentRuntime, Memory, Provider, State } from \"@ai16z/eliza\";\r\nimport { TappdClient } from \"@phala/dstack-sdk\";\r\n\r\nclass RemoteAttestationProvider {\r\n    private client: TappdClient;\r\n\r\n    constructor(endpoint?: string) {\r\n        this.client = endpoint ? new TappdClient(endpoint) : new TappdClient();\r\n    }\r\n\r\n    async generateAttestation(reportData: string): Promise<string> {\r\n        try {\r\n            console.log(\"Generating remote attestation...\");\r\n            const tdxQuote = await this.client.tdxQuote(reportData);\r\n            console.log(\"Remote attestation generated successfully!\");\r\n            return JSON.stringify(tdxQuote);\r\n        } catch (error) {\r\n            console.error(\"Error generating remote attestation:\", error);\r\n            return `Failed to generate TDX Quote: ${error instanceof Error ? error.message : \"Unknown error\"}`;\r\n        }\r\n    }\r\n}\r\n\r\n// Keep the original provider for backwards compatibility\r\nconst remoteAttestationProvider: Provider = {\r\n    get: async (runtime: IAgentRuntime, _message: Memory, _state?: State) => {\r\n        const endpoint = runtime.getSetting(\"DSTACK_SIMULATOR_ENDPOINT\");\r\n        const provider = new RemoteAttestationProvider(endpoint);\r\n        const agentId = runtime.agentId;\r\n\r\n        try {\r\n            const attestation = await provider.generateAttestation(agentId);\r\n            return `Your Agent's remote attestation is: ${attestation}`;\r\n        } catch (error) {\r\n            console.error(\"Error in remote attestation provider:\", error);\r\n            return \"\";\r\n        }\r\n    },\r\n};\r\n\r\nexport { remoteAttestationProvider, RemoteAttestationProvider };\r\n","import { IAgentRuntime, Memory, Provider, State } from \"@ai16z/eliza\";\r\nimport { Keypair } from \"@solana/web3.js\";\r\nimport crypto from \"crypto\";\r\nimport { DeriveKeyResponse, TappdClient } from \"@phala/dstack-sdk\";\r\nimport { privateKeyToAccount } from \"viem/accounts\";\r\nimport { PrivateKeyAccount, keccak256 } from \"viem\";\r\n\r\nclass DeriveKeyProvider {\r\n    private client: TappdClient;\r\n\r\n    constructor(endpoint?: string) {\r\n        this.client = endpoint ? new TappdClient(endpoint) : new TappdClient();\r\n    }\r\n\r\n    async rawDeriveKey(\r\n        path: string,\r\n        subject: string\r\n    ): Promise<DeriveKeyResponse> {\r\n        try {\r\n            if (!path || !subject) {\r\n                console.error(\r\n                    \"Path and Subject are required for key derivation\"\r\n                );\r\n            }\r\n\r\n            console.log(\"Deriving Raw Key in TEE...\");\r\n            const derivedKey = await this.client.deriveKey(path, subject);\r\n\r\n            console.log(\"Raw Key Derived Successfully!\");\r\n            return derivedKey;\r\n        } catch (error) {\r\n            console.error(\"Error deriving raw key:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async deriveEd25519Keypair(\r\n        path: string,\r\n        subject: string\r\n    ): Promise<Keypair> {\r\n        try {\r\n            if (!path || !subject) {\r\n                console.error(\r\n                    \"Path and Subject are required for key derivation\"\r\n                );\r\n            }\r\n\r\n            console.log(\"Deriving Key in TEE...\");\r\n            const derivedKey = await this.client.deriveKey(path, subject);\r\n            const uint8ArrayDerivedKey = derivedKey.asUint8Array();\r\n\r\n            const hash = crypto.createHash(\"sha256\");\r\n            hash.update(uint8ArrayDerivedKey);\r\n            const seed = hash.digest();\r\n            const seedArray = new Uint8Array(seed);\r\n            const keypair = Keypair.fromSeed(seedArray.slice(0, 32));\r\n\r\n            console.log(\"Key Derived Successfully!\");\r\n            return keypair;\r\n        } catch (error) {\r\n            console.error(\"Error deriving key:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async deriveEcdsaKeypair(\r\n        path: string,\r\n        subject: string\r\n    ): Promise<PrivateKeyAccount> {\r\n        try {\r\n            if (!path || !subject) {\r\n                console.error(\r\n                    \"Path and Subject are required for key derivation\"\r\n                );\r\n            }\r\n\r\n            console.log(\"Deriving ECDSA Key in TEE...\");\r\n            const deriveKeyResponse: DeriveKeyResponse =\r\n                await this.client.deriveKey(path, subject);\r\n            const hex = keccak256(deriveKeyResponse.asUint8Array());\r\n            const keypair: PrivateKeyAccount = privateKeyToAccount(hex);\r\n            console.log(\"ECDSA Key Derived Successfully!\");\r\n            return keypair;\r\n        } catch (error) {\r\n            console.error(\"Error deriving ecdsa key:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nconst deriveKeyProvider: Provider = {\r\n    get: async (runtime: IAgentRuntime, _message?: Memory, _state?: State) => {\r\n        const endpoint = runtime.getSetting(\"DSTACK_SIMULATOR_ENDPOINT\");\r\n        const provider = new DeriveKeyProvider(endpoint);\r\n        try {\r\n            // Validate wallet configuration\r\n            if (!runtime.getSetting(\"WALLET_SECRET_SALT\")) {\r\n                console.error(\r\n                    \"Wallet secret salt is not configured in settings\"\r\n                );\r\n                return \"\";\r\n            }\r\n\r\n            let keypair: Keypair;\r\n            try {\r\n                const secretSalt =\r\n                    runtime.getSetting(\"WALLET_SECRET_SALT\") || \"secret_salt\";\r\n                const solanaKeypair = await provider.deriveEd25519Keypair(\r\n                    \"/\",\r\n                    secretSalt\r\n                );\r\n                const evmKeypair = await provider.deriveEcdsaKeypair(\r\n                    \"/\",\r\n                    secretSalt\r\n                );\r\n                return JSON.stringify({\r\n                    solana: solanaKeypair.publicKey,\r\n                    evm: evmKeypair.address,\r\n                });\r\n            } catch (error) {\r\n                console.error(\"Error creating PublicKey:\", error);\r\n                return \"\";\r\n            }\r\n\r\n            return keypair;\r\n        } catch (error) {\r\n            console.error(\"Error in derive key provider:\", error.message);\r\n            return `Failed to fetch derive key information: ${error instanceof Error ? error.message : \"Unknown error\"}`;\r\n        }\r\n    },\r\n};\r\n\r\nexport { deriveKeyProvider, DeriveKeyProvider };\r\n","import { Plugin } from \"@ai16z/eliza\";\r\nimport { remoteAttestationProvider } from \"./providers/remoteAttestationProvider\";\r\nimport { deriveKeyProvider } from \"./providers/deriveKeyProvider\";\r\n\r\nexport const teePlugin: Plugin = {\r\n    name: \"tee\",\r\n    description:\r\n        \"TEE plugin with actions to generate remote attestations and derive keys\",\r\n    actions: [\r\n        /* custom actions */\r\n    ],\r\n    evaluators: [\r\n        /* custom evaluators */\r\n    ],\r\n    providers: [\r\n        /* custom providers */\r\n        remoteAttestationProvider,\r\n        deriveKeyProvider,\r\n    ],\r\n    services: [\r\n        /* custom services */\r\n    ],\r\n};\r\n"],"mappings":"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","names":["TappdClient"]}