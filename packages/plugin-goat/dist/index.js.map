{"version":3,"sources":["../src/actions.ts","../src/index.ts","../src/provider.ts"],"sourcesContent":["import {\r\n    type WalletClient,\r\n    type Plugin,\r\n    getDeferredTools,\r\n    addParametersToDescription,\r\n    type ChainForWalletClient,\r\n    type DeferredTool,\r\n} from \"@goat-sdk/core\";\r\nimport {\r\n    type Action,\r\n    generateText,\r\n    type HandlerCallback,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n    composeContext,\r\n    generateObjectV2,\r\n} from \"@ai16z/eliza\";\r\n\r\ntype GetOnChainActionsParams<TWalletClient extends WalletClient> = {\r\n    chain: ChainForWalletClient<TWalletClient>;\r\n    getWalletClient: (runtime: IAgentRuntime) => Promise<TWalletClient>;\r\n    plugins: Plugin<TWalletClient>[];\r\n    supportsSmartWallets?: boolean;\r\n};\r\n\r\n/**\r\n * Get all the on chain actions for the given wallet client and plugins\r\n *\r\n * @param params\r\n * @returns\r\n */\r\nexport async function getOnChainActions<TWalletClient extends WalletClient>({\r\n    getWalletClient,\r\n    plugins,\r\n    chain,\r\n    supportsSmartWallets,\r\n}: GetOnChainActionsParams<TWalletClient>): Promise<Action[]> {\r\n    const tools = await getDeferredTools<TWalletClient>({\r\n        plugins,\r\n        wordForTool: \"action\",\r\n        chain,\r\n        supportsSmartWallets,\r\n    });\r\n\r\n    return tools\r\n        .map((action) => ({\r\n            ...action,\r\n            name: action.name.toUpperCase(),\r\n        }))\r\n        .map((tool) => createAction(tool, getWalletClient));\r\n}\r\n\r\nfunction createAction<TWalletClient extends WalletClient>(\r\n    tool: DeferredTool<TWalletClient>,\r\n    getWalletClient: (runtime: IAgentRuntime) => Promise<TWalletClient>\r\n): Action {\r\n    return {\r\n        name: tool.name,\r\n        similes: [],\r\n        description: tool.description,\r\n        validate: async () => true,\r\n        handler: async (\r\n            runtime: IAgentRuntime,\r\n            message: Memory,\r\n            state: State | undefined,\r\n            options?: Record<string, unknown>,\r\n            callback?: HandlerCallback\r\n        ): Promise<boolean> => {\r\n            try {\r\n                const walletClient = await getWalletClient(runtime);\r\n                let currentState =\r\n                    state ?? (await runtime.composeState(message));\r\n                currentState =\r\n                    await runtime.updateRecentMessageState(currentState);\r\n\r\n                const parameterContext = composeParameterContext(\r\n                    tool,\r\n                    currentState\r\n                );\r\n                const parameters = await generateParameters(\r\n                    runtime,\r\n                    parameterContext,\r\n                    tool\r\n                );\r\n\r\n                const parsedParameters = tool.parameters.safeParse(parameters);\r\n                if (!parsedParameters.success) {\r\n                    callback?.({\r\n                        text: `Invalid parameters for action ${tool.name}: ${parsedParameters.error.message}`,\r\n                        content: { error: parsedParameters.error.message },\r\n                    });\r\n                    return false;\r\n                }\r\n\r\n                const result = await tool.method(\r\n                    walletClient,\r\n                    parsedParameters.data\r\n                );\r\n                const responseContext = composeResponseContext(\r\n                    tool,\r\n                    result,\r\n                    currentState\r\n                );\r\n                const response = await generateResponse(\r\n                    runtime,\r\n                    responseContext\r\n                );\r\n\r\n                callback?.({ text: response, content: result });\r\n                return true;\r\n            } catch (error) {\r\n                const errorMessage =\r\n                    error instanceof Error ? error.message : String(error);\r\n                callback?.({\r\n                    text: `Error executing action ${tool.name}: ${errorMessage}`,\r\n                    content: { error: errorMessage },\r\n                });\r\n                return false;\r\n            }\r\n        },\r\n        examples: [],\r\n    };\r\n}\r\n\r\nfunction composeParameterContext<TWalletClient extends WalletClient>(\r\n    tool: DeferredTool<TWalletClient>,\r\n    state: State\r\n): string {\r\n    const contextTemplate = `{{recentMessages}}\r\n\r\nGiven the recent messages, extract the following information for the action \"${tool.name}\":\r\n${addParametersToDescription(\"\", tool.parameters)}\r\n`;\r\n    return composeContext({ state, template: contextTemplate });\r\n}\r\n\r\nasync function generateParameters<TWalletClient extends WalletClient>(\r\n    runtime: IAgentRuntime,\r\n    context: string,\r\n    tool: DeferredTool<TWalletClient>\r\n): Promise<unknown> {\r\n    const { object } = await generateObjectV2({\r\n        runtime,\r\n        context,\r\n        modelClass: ModelClass.LARGE,\r\n        schema: tool.parameters,\r\n    });\r\n\r\n    return object;\r\n}\r\n\r\nfunction composeResponseContext<TWalletClient extends WalletClient>(\r\n    tool: DeferredTool<TWalletClient>,\r\n    result: unknown,\r\n    state: State\r\n): string {\r\n    const responseTemplate = `\r\n    # Action Examples\r\n{{actionExamples}}\r\n(Action examples are for reference only. Do not use the information from them in your response.)\r\n\r\n# Knowledge\r\n{{knowledge}}\r\n\r\n# Task: Generate dialog and actions for the character {{agentName}}.\r\nAbout {{agentName}}:\r\n{{bio}}\r\n{{lore}}\r\n\r\n{{providers}}\r\n\r\n{{attachments}}\r\n\r\n# Capabilities\r\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\r\n\r\nThe action \"${tool.name}\" was executed successfully.\r\nHere is the result:\r\n${JSON.stringify(result)}\r\n\r\n{{actions}}\r\n\r\nRespond to the message knowing that the action was successful and these were the previous messages:\r\n{{recentMessages}}\r\n  `;\r\n    return composeContext({ state, template: responseTemplate });\r\n}\r\n\r\nasync function generateResponse(\r\n    runtime: IAgentRuntime,\r\n    context: string\r\n): Promise<string> {\r\n    return generateText({\r\n        runtime,\r\n        context,\r\n        modelClass: ModelClass.LARGE,\r\n    });\r\n}\r\n","import type { Plugin } from '@ai16z/eliza'\r\nimport { getOnChainActions } from './actions';\r\nimport { erc20, USDC } from '@goat-sdk/plugin-erc20';\r\nimport { chain, getWalletClient, walletProvider } from './provider';\r\nimport { sendETH } from '@goat-sdk/core';\r\n\r\nexport const goatPlugin: Plugin = {\r\n    name: \"[GOAT] Onchain Actions\",\r\n    description: \"Base integration plugin\",\r\n    providers: [walletProvider],\r\n    evaluators: [],\r\n    services: [],\r\n    actions: [\r\n        ...(await getOnChainActions({\r\n            getWalletClient,\r\n            // Add plugins here based on what actions you want to use\r\n            // See all available plugins at https://ohmygoat.dev/chains-wallets-plugins#plugins\r\n            plugins: [sendETH(), erc20({ tokens: [USDC] })],\r\n            chain: {\r\n                type: \"evm\",\r\n                id: chain.id,\r\n            },\r\n        })),\r\n    ],\r\n};\r\n\r\nexport default goatPlugin\r\n","import { createWalletClient, http } from \"viem\";\r\nimport { privateKeyToAccount } from \"viem/accounts\";\r\nimport { base } from \"viem/chains\";\r\n\r\nimport { Memory, Provider, State, type IAgentRuntime } from \"@ai16z/eliza\";\r\nimport { viem } from \"@goat-sdk/wallet-viem\";\r\n\r\n\r\n// Add the chain you want to use, remember to update also\r\n// the EVM_PROVIDER_URL to the correct one for the chain\r\nexport const chain = base;\r\n\r\n/**\r\n * Create a wallet client for the given runtime.\r\n *\r\n * You can change it to use a different wallet client such as Crossmint smart wallets or others.\r\n *\r\n * See all available wallet clients at https://ohmygoat.dev/wallets\r\n *\r\n * @param runtime\r\n * @returns Wallet client\r\n */\r\nexport async function getWalletClient(runtime: IAgentRuntime) {\r\n    const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\r\n    if (!privateKey) throw new Error(\"EVM_PRIVATE_KEY not configured\");\r\n\r\n    const provider = runtime.getSetting(\"EVM_PROVIDER_URL\");\r\n    if (!provider) throw new Error(\"EVM_PROVIDER_URL not configured\");\r\n\r\n    const walletClient = createWalletClient({\r\n        account: privateKeyToAccount(privateKey as `0x${string}`),\r\n        chain: chain,\r\n        transport: http(provider),\r\n    });\r\n    return viem(walletClient);\r\n}\r\n\r\nexport const walletProvider: Provider = {\r\n    async get(\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state?: State\r\n    ): Promise<string | null> {\r\n        try {\r\n            const walletClient = await getWalletClient(runtime);\r\n            const address = walletClient.getAddress();\r\n            const balance = await walletClient.balanceOf(address);\r\n            return `EVM Wallet Address: ${address}\\nBalance: ${balance} ETH`;\r\n        } catch (error) {\r\n            console.error(\"Error in EVM wallet provider:\", error);\r\n            return null;\r\n        }\r\n    },\r\n};\r\n"],"mappings":"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","names":["getWalletClient","chain"]}