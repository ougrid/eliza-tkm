{"version":3,"sources":["../src/index.ts","../src/telegramClient.ts","../src/messageManager.ts","../src/getOrCreateRecommenderInBe.ts","../src/environment.ts"],"sourcesContent":["import { elizaLogger } from \"@ai16z/eliza\";\r\nimport { Client, IAgentRuntime } from \"@ai16z/eliza\";\r\nimport { TelegramClient } from \"./telegramClient.ts\";\r\nimport { validateTelegramConfig } from \"./environment.ts\";\r\n\r\nexport const TelegramClientInterface: Client = {\r\n    start: async (runtime: IAgentRuntime) => {\r\n        await validateTelegramConfig(runtime);\r\n\r\n        const tg = new TelegramClient(\r\n            runtime,\r\n            runtime.getSetting(\"TELEGRAM_BOT_TOKEN\")\r\n        );\r\n\r\n        await tg.start();\r\n\r\n        elizaLogger.success(\r\n            `‚úÖ Telegram client successfully started for character ${runtime.character.name}`\r\n        );\r\n        return tg;\r\n    },\r\n    stop: async (_runtime: IAgentRuntime) => {\r\n        elizaLogger.warn(\"Telegram client does not support stopping yet\");\r\n    },\r\n};\r\n\r\nexport default TelegramClientInterface;\r\n","import { Context, Telegraf } from \"telegraf\";\r\nimport { IAgentRuntime, elizaLogger } from \"@ai16z/eliza\";\r\nimport { MessageManager } from \"./messageManager.ts\";\r\nimport { getOrCreateRecommenderInBe } from \"./getOrCreateRecommenderInBe.ts\";\r\n\r\nexport class TelegramClient {\r\n    private bot: Telegraf<Context>;\r\n    private runtime: IAgentRuntime;\r\n    private messageManager: MessageManager;\r\n    private backend;\r\n    private backendToken;\r\n    private tgTrader;\r\n\r\n    constructor(runtime: IAgentRuntime, botToken: string) {\r\n        elizaLogger.log(\"üì± Constructing new TelegramClient...\");\r\n        this.runtime = runtime;\r\n        this.bot = new Telegraf(botToken);\r\n        this.messageManager = new MessageManager(this.bot, this.runtime);\r\n        this.backend = runtime.getSetting(\"BACKEND_URL\");\r\n        this.backendToken = runtime.getSetting(\"BACKEND_TOKEN\");\r\n        this.tgTrader = runtime.getSetting(\"TG_TRADER\"); // boolean To Be added to the settings\r\n        elizaLogger.log(\"‚úÖ TelegramClient constructor completed\");\r\n    }\r\n\r\n    public async start(): Promise<void> {\r\n        elizaLogger.log(\"üöÄ Starting Telegram bot...\");\r\n        try {\r\n            await this.initializeBot();\r\n            this.setupMessageHandlers();\r\n            this.setupShutdownHandlers();\r\n        } catch (error) {\r\n            elizaLogger.error(\"‚ùå Failed to launch Telegram bot:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async initializeBot(): Promise<void> {\r\n        this.bot.launch({ dropPendingUpdates: true });\r\n        elizaLogger.log(\r\n            \"‚ú® Telegram bot successfully launched and is running!\"\r\n        );\r\n\r\n        const botInfo = await this.bot.telegram.getMe();\r\n        this.bot.botInfo = botInfo;\r\n        elizaLogger.success(`Bot username: @${botInfo.username}`);\r\n\r\n        this.messageManager.bot = this.bot;\r\n    }\r\n\r\n    private setupMessageHandlers(): void {\r\n        elizaLogger.log(\"Setting up message handler...\");\r\n\r\n        this.bot.on(\"message\", async (ctx) => {\r\n            try {\r\n                if (this.tgTrader) {\r\n                    const userId = ctx.from?.id.toString();\r\n                    const username =\r\n                        ctx.from?.username || ctx.from?.first_name || \"Unknown\";\r\n                    if (!userId) {\r\n                        elizaLogger.warn(\r\n                            \"Received message from a user without an ID.\"\r\n                        );\r\n                        return;\r\n                    }\r\n                    try {\r\n                        await getOrCreateRecommenderInBe(\r\n                            userId,\r\n                            username,\r\n                            this.backendToken,\r\n                            this.backend\r\n                        );\r\n                    } catch (error) {\r\n                        elizaLogger.error(\r\n                            \"Error getting or creating recommender in backend\",\r\n                            error\r\n                        );\r\n                    }\r\n                }\r\n                await this.messageManager.handleMessage(ctx);\r\n            } catch (error) {\r\n                elizaLogger.error(\"‚ùå Error handling message:\", error);\r\n                await ctx.reply(\r\n                    \"An error occurred while processing your message.\"\r\n                );\r\n            }\r\n        });\r\n\r\n        this.bot.on(\"photo\", (ctx) => {\r\n            elizaLogger.log(\r\n                \"üì∏ Received photo message with caption:\",\r\n                ctx.message.caption\r\n            );\r\n        });\r\n\r\n        this.bot.on(\"document\", (ctx) => {\r\n            elizaLogger.log(\r\n                \"üìé Received document message:\",\r\n                ctx.message.document.file_name\r\n            );\r\n        });\r\n\r\n        this.bot.catch((err, ctx) => {\r\n            elizaLogger.error(`‚ùå Telegram Error for ${ctx.updateType}:`, err);\r\n            ctx.reply(\"An unexpected error occurred. Please try again later.\");\r\n        });\r\n    }\r\n\r\n    private setupShutdownHandlers(): void {\r\n        const shutdownHandler = async (signal: string) => {\r\n            elizaLogger.log(\r\n                `‚ö†Ô∏è Received ${signal}. Shutting down Telegram bot gracefully...`\r\n            );\r\n            try {\r\n                await this.stop();\r\n                elizaLogger.log(\"üõë Telegram bot stopped gracefully\");\r\n            } catch (error) {\r\n                elizaLogger.error(\r\n                    \"‚ùå Error during Telegram bot shutdown:\",\r\n                    error\r\n                );\r\n                throw error;\r\n            }\r\n        };\r\n\r\n        process.once(\"SIGINT\", () => shutdownHandler(\"SIGINT\"));\r\n        process.once(\"SIGTERM\", () => shutdownHandler(\"SIGTERM\"));\r\n        process.once(\"SIGHUP\", () => shutdownHandler(\"SIGHUP\"));\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        elizaLogger.log(\"Stopping Telegram bot...\");\r\n        await this.bot.stop();\r\n        elizaLogger.log(\"Telegram bot stopped\");\r\n    }\r\n}\r\n","import { Message } from \"@telegraf/types\";\r\nimport { Context, Telegraf } from \"telegraf\";\r\n\r\nimport { composeContext, elizaLogger, ServiceType } from \"@ai16z/eliza\";\r\nimport { getEmbeddingZeroVector } from \"@ai16z/eliza\";\r\nimport {\r\n    Content,\r\n    HandlerCallback,\r\n    IAgentRuntime,\r\n    IImageDescriptionService,\r\n    Memory,\r\n    ModelClass,\r\n    State,\r\n    UUID,\r\n} from \"@ai16z/eliza\";\r\nimport { stringToUuid } from \"@ai16z/eliza\";\r\n\r\nimport { generateMessageResponse, generateShouldRespond } from \"@ai16z/eliza\";\r\nimport { messageCompletionFooter, shouldRespondFooter } from \"@ai16z/eliza\";\r\n\r\nconst MAX_MESSAGE_LENGTH = 4096; // Telegram's max message length\r\n\r\nconst telegramShouldRespondTemplate =\r\n    `# About {{agentName}}:\r\n{{bio}}\r\n\r\n# RESPONSE EXAMPLES\r\n{{user1}}: I just saw a really great movie\r\n{{user2}}: Oh? Which movie?\r\nResult: [IGNORE]\r\n\r\n{{agentName}}: Oh, this is my favorite scene\r\n{{user1}}: sick\r\n{{user2}}: wait, why is it your favorite scene\r\nResult: [RESPOND]\r\n\r\n{{user1}}: stfu bot\r\nResult: [STOP]\r\n\r\n{{user1}}: Hey {{agent}}, can you help me with something\r\nResult: [RESPOND]\r\n\r\n{{user1}}: {{agentName}} stfu plz\r\nResult: [STOP]\r\n\r\n{{user1}}: i need help\r\n{{agentName}}: how can I help you?\r\n{{user1}}: no. i need help from someone else\r\nResult: [IGNORE]\r\n\r\n{{user1}}: Hey {{agent}}, can I ask you a question\r\n{{agentName}}: Sure, what is it\r\n{{user1}}: can you ask claude to create a basic react module that demonstrates a counter\r\nResult: [RESPOND]\r\n\r\n{{user1}}: {{agentName}} can you tell me a story\r\n{{agentName}}: uhhh...\r\n{{user1}}: please do it\r\n{{agentName}}: okay\r\n{{agentName}}: once upon a time, in a quaint little village, there was a curious girl named elara\r\n{{user1}}: I'm loving it, keep going\r\nResult: [RESPOND]\r\n\r\n{{user1}}: {{agentName}} stop responding plz\r\nResult: [STOP]\r\n\r\n{{user1}}: okay, i want to test something. {{agentName}}, can you say marco?\r\n{{agentName}}: marco\r\n{{user1}}: great. okay, now do it again\r\nResult: [RESPOND]\r\n\r\nResponse options are [RESPOND], [IGNORE] and [STOP].\r\n\r\n{{agentName}} is in a room with other users and should only respond when they are being addressed, and should not respond if they are continuing a conversation that is very long.\r\n\r\nRespond with [RESPOND] to messages that are directed at {{agentName}}, or participate in conversations that are interesting or relevant to their background.\r\nIf a message is not interesting, relevant, or does not directly address {{agentName}}, respond with [IGNORE]\r\n\r\nAlso, respond with [IGNORE] to messages that are very short or do not contain much information.\r\n\r\nIf a user asks {{agentName}} to be quiet, respond with [STOP]\r\nIf {{agentName}} concludes a conversation and isn't part of the conversation anymore, respond with [STOP]\r\n\r\nIMPORTANT: {{agentName}} is particularly sensitive about being annoying, so if there is any doubt, it is better to respond with [IGNORE].\r\nIf {{agentName}} is conversing with a user and they have not asked to stop, it is better to respond with [RESPOND].\r\n\r\nThe goal is to decide whether {{agentName}} should respond to the last message.\r\n\r\n{{recentMessages}}\r\n\r\nThread of Tweets You Are Replying To:\r\n\r\n{{formattedConversation}}\r\n\r\n# INSTRUCTIONS: Choose the option that best describes {{agentName}}'s response to the last message. Ignore messages if they are addressed to someone else.\r\n` + shouldRespondFooter;\r\n\r\nconst telegramMessageHandlerTemplate =\r\n    // {{goals}}\r\n    `# Action Examples\r\n{{actionExamples}}\r\n(Action examples are for reference only. Do not use the information from them in your response.)\r\n\r\n# Knowledge\r\n{{knowledge}}\r\n\r\n# Task: Generate dialog and actions for the character {{agentName}}.\r\nAbout {{agentName}}:\r\n{{bio}}\r\n{{lore}}\r\n\r\nExamples of {{agentName}}'s dialog and actions:\r\n{{characterMessageExamples}}\r\n\r\n{{providers}}\r\n\r\n{{attachments}}\r\n\r\n{{actions}}\r\n\r\n# Capabilities\r\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\r\n\r\n{{messageDirections}}\r\n\r\n{{recentMessages}}\r\n\r\n# Task: Generate a post/reply in the voice, style and perspective of {{agentName}} (@{{twitterUserName}}) while using the thread of tweets as additional context:\r\nCurrent Post:\r\n{{currentPost}}\r\nThread of Tweets You Are Replying To:\r\n\r\n{{formattedConversation}}\r\n` + messageCompletionFooter;\r\n\r\nexport class MessageManager {\r\n    public bot: Telegraf<Context>;\r\n    private runtime: IAgentRuntime;\r\n\r\n    constructor(bot: Telegraf<Context>, runtime: IAgentRuntime) {\r\n        this.bot = bot;\r\n        this.runtime = runtime;\r\n    }\r\n\r\n    // Process image messages and generate descriptions\r\n    private async processImage(\r\n        message: Message\r\n    ): Promise<{ description: string } | null> {\r\n        try {\r\n            let imageUrl: string | null = null;\r\n\r\n            if (\"photo\" in message && message.photo?.length > 0) {\r\n                const photo = message.photo[message.photo.length - 1];\r\n                const fileLink = await this.bot.telegram.getFileLink(\r\n                    photo.file_id\r\n                );\r\n                imageUrl = fileLink.toString();\r\n            } else if (\r\n                \"document\" in message &&\r\n                message.document?.mime_type?.startsWith(\"image/\")\r\n            ) {\r\n                const fileLink = await this.bot.telegram.getFileLink(\r\n                    message.document.file_id\r\n                );\r\n                imageUrl = fileLink.toString();\r\n            }\r\n\r\n            if (imageUrl) {\r\n                const imageDescriptionService =\r\n                    this.runtime.getService<IImageDescriptionService>(\r\n                        ServiceType.IMAGE_DESCRIPTION\r\n                    );\r\n                const { title, description } =\r\n                    await imageDescriptionService.describeImage(imageUrl);\r\n                return { description: `[Image: ${title}\\n${description}]` };\r\n            }\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error processing image:\", error);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // Decide if the bot should respond to the message\r\n    private async _shouldRespond(\r\n        message: Message,\r\n        state: State\r\n    ): Promise<boolean> {\r\n        // Respond if bot is mentioned\r\n        if (\r\n            \"text\" in message &&\r\n            message.text?.includes(`@${this.bot.botInfo?.username}`)\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        // Respond to private chats\r\n        if (message.chat.type === \"private\") {\r\n            return true;\r\n        }\r\n\r\n        // Don't respond to images in group chats\r\n        if (\r\n            \"photo\" in message ||\r\n            (\"document\" in message &&\r\n                message.document?.mime_type?.startsWith(\"image/\"))\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        // Use AI to decide for text or captions\r\n        if (\"text\" in message || (\"caption\" in message && message.caption)) {\r\n            const shouldRespondContext = composeContext({\r\n                state,\r\n                template:\r\n                    this.runtime.character.templates\r\n                        ?.telegramShouldRespondTemplate ||\r\n                    this.runtime.character?.templates?.shouldRespondTemplate ||\r\n                    telegramShouldRespondTemplate,\r\n            });\r\n\r\n            const response = await generateShouldRespond({\r\n                runtime: this.runtime,\r\n                context: shouldRespondContext,\r\n                modelClass: ModelClass.SMALL,\r\n            });\r\n\r\n            return response === \"RESPOND\";\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Send long messages in chunks\r\n    private async sendMessageInChunks(\r\n        ctx: Context,\r\n        content: string,\r\n        replyToMessageId?: number\r\n    ): Promise<Message.TextMessage[]> {\r\n        const chunks = this.splitMessage(content);\r\n        const sentMessages: Message.TextMessage[] = [];\r\n\r\n        for (let i = 0; i < chunks.length; i++) {\r\n            const chunk = chunks[i];\r\n            const sentMessage = (await ctx.telegram.sendMessage(\r\n                ctx.chat.id,\r\n                chunk,\r\n                {\r\n                    reply_parameters:\r\n                        i === 0 && replyToMessageId\r\n                            ? { message_id: replyToMessageId }\r\n                            : undefined,\r\n                }\r\n            )) as Message.TextMessage;\r\n\r\n            sentMessages.push(sentMessage);\r\n        }\r\n\r\n        return sentMessages;\r\n    }\r\n\r\n    // Split message into smaller parts\r\n    private splitMessage(text: string): string[] {\r\n        const chunks: string[] = [];\r\n        let currentChunk = \"\";\r\n\r\n        const lines = text.split(\"\\n\");\r\n        for (const line of lines) {\r\n            if (currentChunk.length + line.length + 1 <= MAX_MESSAGE_LENGTH) {\r\n                currentChunk += (currentChunk ? \"\\n\" : \"\") + line;\r\n            } else {\r\n                if (currentChunk) chunks.push(currentChunk);\r\n                currentChunk = line;\r\n            }\r\n        }\r\n\r\n        if (currentChunk) chunks.push(currentChunk);\r\n        return chunks;\r\n    }\r\n\r\n    // Generate a response using AI\r\n    private async _generateResponse(\r\n        message: Memory,\r\n        _state: State,\r\n        context: string\r\n    ): Promise<Content> {\r\n        const { userId, roomId } = message;\r\n\r\n        const response = await generateMessageResponse({\r\n            runtime: this.runtime,\r\n            context,\r\n            modelClass: ModelClass.LARGE,\r\n        });\r\n\r\n        if (!response) {\r\n            console.error(\"‚ùå No response from generateMessageResponse\");\r\n            return null;\r\n        }\r\n\r\n        await this.runtime.databaseAdapter.log({\r\n            body: { message, context, response },\r\n            userId,\r\n            roomId,\r\n            type: \"response\",\r\n        });\r\n\r\n        return response;\r\n    }\r\n\r\n    // Main handler for incoming messages\r\n    public async handleMessage(ctx: Context): Promise<void> {\r\n        if (!ctx.message || !ctx.from) {\r\n            return; // Exit if no message or sender info\r\n        }\r\n\r\n        if (\r\n            this.runtime.character.clientConfig?.telegram\r\n                ?.shouldIgnoreBotMessages &&\r\n            ctx.from.is_bot\r\n        ) {\r\n            return;\r\n        }\r\n        if (\r\n            this.runtime.character.clientConfig?.telegram\r\n                ?.shouldIgnoreDirectMessages &&\r\n            ctx.chat?.type === \"private\"\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        const message = ctx.message;\r\n\r\n        try {\r\n            // Convert IDs to UUIDs\r\n            const userId = stringToUuid(ctx.from.id.toString()) as UUID;\r\n\r\n            // Get user name\r\n            const userName =\r\n                ctx.from.username || ctx.from.first_name || \"Unknown User\";\r\n\r\n            // Get chat ID\r\n            const chatId = stringToUuid(\r\n                ctx.chat?.id.toString() + \"-\" + this.runtime.agentId\r\n            ) as UUID;\r\n\r\n            // Get agent ID\r\n            const agentId = this.runtime.agentId;\r\n\r\n            // Get room ID\r\n            const roomId = chatId;\r\n\r\n            // Ensure connection\r\n            await this.runtime.ensureConnection(\r\n                userId,\r\n                roomId,\r\n                userName,\r\n                userName,\r\n                \"telegram\"\r\n            );\r\n\r\n            // Get message ID\r\n            const messageId = stringToUuid(\r\n                message.message_id.toString() + \"-\" + this.runtime.agentId\r\n            ) as UUID;\r\n\r\n            // Handle images\r\n            const imageInfo = await this.processImage(message);\r\n\r\n            // Get text or caption\r\n            let messageText = \"\";\r\n            if (\"text\" in message) {\r\n                messageText = message.text;\r\n            } else if (\"caption\" in message && message.caption) {\r\n                messageText = message.caption;\r\n            }\r\n\r\n            // Combine text and image description\r\n            const fullText = imageInfo\r\n                ? `${messageText} ${imageInfo.description}`\r\n                : messageText;\r\n\r\n            if (!fullText) {\r\n                return; // Skip if no content\r\n            }\r\n\r\n            // Create content\r\n            const content: Content = {\r\n                text: fullText,\r\n                source: \"telegram\",\r\n                inReplyTo:\r\n                    \"reply_to_message\" in message && message.reply_to_message\r\n                        ? stringToUuid(\r\n                              message.reply_to_message.message_id.toString() +\r\n                                  \"-\" +\r\n                                  this.runtime.agentId\r\n                          )\r\n                        : undefined,\r\n            };\r\n\r\n            // Create memory for the message\r\n            const memory: Memory = {\r\n                id: messageId,\r\n                agentId,\r\n                userId,\r\n                roomId,\r\n                content,\r\n                createdAt: message.date * 1000,\r\n                embedding: getEmbeddingZeroVector(),\r\n            };\r\n\r\n            // Create memory\r\n            await this.runtime.messageManager.createMemory(memory);\r\n\r\n            // Update state with the new memory\r\n            let state = await this.runtime.composeState(memory);\r\n            state = await this.runtime.updateRecentMessageState(state);\r\n\r\n            // Decide whether to respond\r\n            const shouldRespond = await this._shouldRespond(message, state);\r\n\r\n            if (shouldRespond) {\r\n                // Generate response\r\n                const context = composeContext({\r\n                    state,\r\n                    template:\r\n                        this.runtime.character.templates\r\n                            ?.telegramMessageHandlerTemplate ||\r\n                        this.runtime.character?.templates\r\n                            ?.messageHandlerTemplate ||\r\n                        telegramMessageHandlerTemplate,\r\n                });\r\n\r\n                const responseContent = await this._generateResponse(\r\n                    memory,\r\n                    state,\r\n                    context\r\n                );\r\n\r\n                if (!responseContent || !responseContent.text) return;\r\n\r\n                // Send response in chunks\r\n                const callback: HandlerCallback = async (content: Content) => {\r\n                    const sentMessages = await this.sendMessageInChunks(\r\n                        ctx,\r\n                        content.text,\r\n                        message.message_id\r\n                    );\r\n\r\n                    const memories: Memory[] = [];\r\n\r\n                    // Create memories for each sent message\r\n                    for (let i = 0; i < sentMessages.length; i++) {\r\n                        const sentMessage = sentMessages[i];\r\n                        const isLastMessage = i === sentMessages.length - 1;\r\n\r\n                        const memory: Memory = {\r\n                            id: stringToUuid(\r\n                                sentMessage.message_id.toString() +\r\n                                    \"-\" +\r\n                                    this.runtime.agentId\r\n                            ),\r\n                            agentId,\r\n                            userId,\r\n                            roomId,\r\n                            content: {\r\n                                ...content,\r\n                                text: sentMessage.text,\r\n                                inReplyTo: messageId,\r\n                            },\r\n                            createdAt: sentMessage.date * 1000,\r\n                            embedding: getEmbeddingZeroVector(),\r\n                        };\r\n\r\n                        // Set action to CONTINUE for all messages except the last one\r\n                        // For the last message, use the original action from the response content\r\n                        memory.content.action = !isLastMessage\r\n                            ? \"CONTINUE\"\r\n                            : content.action;\r\n\r\n                        await this.runtime.messageManager.createMemory(memory);\r\n                        memories.push(memory);\r\n                    }\r\n\r\n                    return memories;\r\n                };\r\n\r\n                // Execute callback to send messages and log memories\r\n                const responseMessages = await callback(responseContent);\r\n\r\n                // Update state after response\r\n                state = await this.runtime.updateRecentMessageState(state);\r\n\r\n                // Handle any resulting actions\r\n                await this.runtime.processActions(\r\n                    memory,\r\n                    responseMessages,\r\n                    state,\r\n                    callback\r\n                );\r\n            }\r\n\r\n            await this.runtime.evaluate(memory, state, shouldRespond);\r\n        } catch (error) {\r\n            elizaLogger.error(\"‚ùå Error handling message:\", error);\r\n            elizaLogger.error(\"Error sending message:\", error);\r\n        }\r\n    }\r\n}\r\n","export async function getOrCreateRecommenderInBe(\r\n    recommenderId: string,\r\n    username: string,\r\n    backendToken: string,\r\n    backend: string,\r\n    retries = 3,\r\n    delayMs = 2000\r\n) {\r\n    for (let attempt = 1; attempt <= retries; attempt++) {\r\n        try {\r\n            const response = await fetch(\r\n                `${backend}/api/updaters/getOrCreateRecommender`,\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${backendToken}`,\r\n                    },\r\n                    body: JSON.stringify({\r\n                        recommenderId: recommenderId,\r\n                        username: username,\r\n                    }),\r\n                }\r\n            );\r\n            const data = await response.json();\r\n            return data;\r\n        } catch (error) {\r\n            console.error(\r\n                `Attempt ${attempt} failed: Error getting or creating recommender in backend`,\r\n                error\r\n            );\r\n            if (attempt < retries) {\r\n                console.log(`Retrying in ${delayMs} ms...`);\r\n                await new Promise((resolve) => setTimeout(resolve, delayMs));\r\n            } else {\r\n                console.error(\"All attempts failed.\");\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { IAgentRuntime } from \"@ai16z/eliza\";\r\nimport { z } from \"zod\";\r\n\r\nexport const telegramEnvSchema = z.object({\r\n    TELEGRAM_BOT_TOKEN: z.string().min(1, \"Telegram bot token is required\"),\r\n});\r\n\r\nexport type TelegramConfig = z.infer<typeof telegramEnvSchema>;\r\n\r\nexport async function validateTelegramConfig(\r\n    runtime: IAgentRuntime\r\n): Promise<TelegramConfig> {\r\n    try {\r\n        const config = {\r\n            TELEGRAM_BOT_TOKEN:\r\n                runtime.getSetting(\"TELEGRAM_BOT_TOKEN\") ||\r\n                process.env.TELEGRAM_BOT_TOKEN,\r\n        };\r\n\r\n        return telegramEnvSchema.parse(config);\r\n    } catch (error) {\r\n        if (error instanceof z.ZodError) {\r\n            const errorMessages = error.errors\r\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\r\n                .join(\"\\n\");\r\n            throw new Error(\r\n                `Telegram configuration validation failed:\\n${errorMessages}`\r\n            );\r\n        }\r\n        throw error;\r\n    }\r\n}\r\n"],"mappings":"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","names":["elizaLogger","elizaLogger","content","memory","elizaLogger","elizaLogger"]}