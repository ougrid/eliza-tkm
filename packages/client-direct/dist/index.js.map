{"version":3,"sources":["../src/index.ts","../src/api.ts"],"sourcesContent":["import bodyParser from \"body-parser\";\r\nimport cors from \"cors\";\r\nimport express, { Request as ExpressRequest } from \"express\";\r\nimport multer, { File } from \"multer\";\r\nimport { elizaLogger, generateCaption, generateImage } from \"@ai16z/eliza\";\r\nimport { composeContext } from \"@ai16z/eliza\";\r\nimport { generateMessageResponse } from \"@ai16z/eliza\";\r\nimport { messageCompletionFooter } from \"@ai16z/eliza\";\r\nimport { AgentRuntime } from \"@ai16z/eliza\";\r\nimport {\r\n    Content,\r\n    Memory,\r\n    ModelClass,\r\n    Client,\r\n    IAgentRuntime,\r\n} from \"@ai16z/eliza\";\r\nimport { stringToUuid } from \"@ai16z/eliza\";\r\nimport { settings } from \"@ai16z/eliza\";\r\nimport { createApiRouter } from \"./api.ts\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nconst upload = multer({ storage: multer.memoryStorage() });\r\n\r\nexport const messageHandlerTemplate =\r\n    // {{goals}}\r\n    `# Action Examples\r\n{{actionExamples}}\r\n(Action examples are for reference only. Do not use the information from them in your response.)\r\n\r\n# Knowledge\r\n{{knowledge}}\r\n\r\n# Task: Generate dialog and actions for the character {{agentName}}.\r\nAbout {{agentName}}:\r\n{{bio}}\r\n{{lore}}\r\n\r\n{{providers}}\r\n\r\n{{attachments}}\r\n\r\n# Capabilities\r\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\r\n\r\n{{messageDirections}}\r\n\r\n{{recentMessages}}\r\n\r\n{{actions}}\r\n\r\n# Instructions: Write the next message for {{agentName}}.\r\n` + messageCompletionFooter;\r\n\r\nexport interface SimliClientConfig {\r\n    apiKey: string;\r\n    faceID: string;\r\n    handleSilence: boolean;\r\n    videoRef: any;\r\n    audioRef: any;\r\n}\r\nexport class DirectClient {\r\n    public app: express.Application;\r\n    private agents: Map<string, AgentRuntime>;\r\n    private server: any; // Store server instance\r\n\r\n    constructor() {\r\n        elizaLogger.log(\"DirectClient constructor\");\r\n        this.app = express();\r\n        this.app.use(cors());\r\n        this.agents = new Map();\r\n\r\n        this.app.use(bodyParser.json());\r\n        this.app.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n        const apiRouter = createApiRouter(this.agents);\r\n        this.app.use(apiRouter);\r\n\r\n        // Define an interface that extends the Express Request interface\r\n        interface CustomRequest extends ExpressRequest {\r\n            file: File;\r\n        }\r\n\r\n        // Update the route handler to use CustomRequest instead of express.Request\r\n        this.app.post(\r\n            \"/:agentId/whisper\",\r\n            upload.single(\"file\"),\r\n            async (req: CustomRequest, res: express.Response) => {\r\n                const audioFile = req.file; // Access the uploaded file using req.file\r\n                const agentId = req.params.agentId;\r\n\r\n                if (!audioFile) {\r\n                    res.status(400).send(\"No audio file provided\");\r\n                    return;\r\n                }\r\n\r\n                let runtime = this.agents.get(agentId);\r\n\r\n                // if runtime is null, look for runtime with the same name\r\n                if (!runtime) {\r\n                    runtime = Array.from(this.agents.values()).find(\r\n                        (a) =>\r\n                            a.character.name.toLowerCase() ===\r\n                            agentId.toLowerCase()\r\n                    );\r\n                }\r\n\r\n                if (!runtime) {\r\n                    res.status(404).send(\"Agent not found\");\r\n                    return;\r\n                }\r\n\r\n                const formData = new FormData();\r\n                const audioBlob = new Blob([audioFile.buffer], {\r\n                    type: audioFile.mimetype,\r\n                });\r\n                formData.append(\"file\", audioBlob, audioFile.originalname);\r\n                formData.append(\"model\", \"whisper-1\");\r\n\r\n                const response = await fetch(\r\n                    \"https://api.openai.com/v1/audio/transcriptions\",\r\n                    {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            Authorization: `Bearer ${runtime.token}`,\r\n                        },\r\n                        body: formData,\r\n                    }\r\n                );\r\n\r\n                const data = await response.json();\r\n                res.json(data);\r\n            }\r\n        );\r\n\r\n        this.app.post(\r\n            \"/:agentId/message\",\r\n            async (req: express.Request, res: express.Response) => {\r\n                const agentId = req.params.agentId;\r\n                const roomId = stringToUuid(\r\n                    req.body.roomId ?? \"default-room-\" + agentId\r\n                );\r\n                const userId = stringToUuid(req.body.userId ?? \"user\");\r\n\r\n                let runtime = this.agents.get(agentId);\r\n\r\n                // if runtime is null, look for runtime with the same name\r\n                if (!runtime) {\r\n                    runtime = Array.from(this.agents.values()).find(\r\n                        (a) =>\r\n                            a.character.name.toLowerCase() ===\r\n                            agentId.toLowerCase()\r\n                    );\r\n                }\r\n\r\n                if (!runtime) {\r\n                    res.status(404).send(\"Agent not found\");\r\n                    return;\r\n                }\r\n\r\n                await runtime.ensureConnection(\r\n                    userId,\r\n                    roomId,\r\n                    req.body.userName,\r\n                    req.body.name,\r\n                    \"direct\"\r\n                );\r\n\r\n                const text = req.body.text;\r\n                const messageId = stringToUuid(Date.now().toString());\r\n\r\n                const content: Content = {\r\n                    text,\r\n                    attachments: [],\r\n                    source: \"direct\",\r\n                    inReplyTo: undefined,\r\n                };\r\n\r\n                const userMessage = {\r\n                    content,\r\n                    userId,\r\n                    roomId,\r\n                    agentId: runtime.agentId,\r\n                };\r\n\r\n                const memory: Memory = {\r\n                    id: messageId,\r\n                    agentId: runtime.agentId,\r\n                    userId,\r\n                    roomId,\r\n                    content,\r\n                    createdAt: Date.now(),\r\n                };\r\n\r\n                await runtime.messageManager.createMemory(memory);\r\n\r\n                const state = await runtime.composeState(userMessage, {\r\n                    agentName: runtime.character.name,\r\n                });\r\n\r\n                const context = composeContext({\r\n                    state,\r\n                    template: messageHandlerTemplate,\r\n                });\r\n\r\n                const response = await generateMessageResponse({\r\n                    runtime: runtime,\r\n                    context,\r\n                    modelClass: ModelClass.SMALL,\r\n                });\r\n\r\n                // save response to memory\r\n                const responseMessage = {\r\n                    ...userMessage,\r\n                    userId: runtime.agentId,\r\n                    content: response,\r\n                };\r\n\r\n                await runtime.messageManager.createMemory(responseMessage);\r\n\r\n                if (!response) {\r\n                    res.status(500).send(\r\n                        \"No response from generateMessageResponse\"\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                let message = null as Content | null;\r\n\r\n                await runtime.evaluate(memory, state);\r\n\r\n                const _result = await runtime.processActions(\r\n                    memory,\r\n                    [responseMessage],\r\n                    state,\r\n                    async (newMessages) => {\r\n                        message = newMessages;\r\n                        return [memory];\r\n                    }\r\n                );\r\n\r\n                if (message) {\r\n                    res.json([response, message]);\r\n                } else {\r\n                    res.json([response]);\r\n                }\r\n            }\r\n        );\r\n\r\n        this.app.post(\r\n            \"/:agentId/image\",\r\n            async (req: express.Request, res: express.Response) => {\r\n                const agentId = req.params.agentId;\r\n                const agent = this.agents.get(agentId);\r\n                if (!agent) {\r\n                    res.status(404).send(\"Agent not found\");\r\n                    return;\r\n                }\r\n\r\n                const images = await generateImage({ ...req.body }, agent);\r\n                const imagesRes: { image: string; caption: string }[] = [];\r\n                if (images.data && images.data.length > 0) {\r\n                    for (let i = 0; i < images.data.length; i++) {\r\n                        const caption = await generateCaption(\r\n                            { imageUrl: images.data[i] },\r\n                            agent\r\n                        );\r\n                        imagesRes.push({\r\n                            image: images.data[i],\r\n                            caption: caption.title,\r\n                        });\r\n                    }\r\n                }\r\n                res.json({ images: imagesRes });\r\n            }\r\n        );\r\n\r\n        this.app.post(\r\n            \"/fine-tune\",\r\n            async (req: express.Request, res: express.Response) => {\r\n                try {\r\n                    const response = await fetch(\r\n                        \"https://api.bageldb.ai/api/v1/asset\",\r\n                        {\r\n                            method: \"POST\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\r\n                                \"X-API-KEY\": `${process.env.BAGEL_API_KEY}`,\r\n                            },\r\n                            body: JSON.stringify(req.body),\r\n                        }\r\n                    );\r\n\r\n                    const data = await response.json();\r\n                    res.json(data);\r\n                } catch (error) {\r\n                    res.status(500).json({\r\n                        error: \"Please create an account at bakery.bagel.net and get an API key. Then set the BAGEL_API_KEY environment variable.\",\r\n                        details: error.message,\r\n                    });\r\n                }\r\n            }\r\n        );\r\n        this.app.get(\r\n            \"/fine-tune/:assetId\",\r\n            async (req: express.Request, res: express.Response) => {\r\n                const assetId = req.params.assetId;\r\n                const downloadDir = path.join(\r\n                    process.cwd(),\r\n                    \"downloads\",\r\n                    assetId\r\n                );\r\n\r\n                console.log(\"Download directory:\", downloadDir);\r\n\r\n                try {\r\n                    console.log(\"Creating directory...\");\r\n                    await fs.promises.mkdir(downloadDir, { recursive: true });\r\n\r\n                    console.log(\"Fetching file...\");\r\n                    const fileResponse = await fetch(\r\n                        `https://api.bageldb.ai/api/v1/asset/${assetId}/download`,\r\n                        {\r\n                            headers: {\r\n                                \"X-API-KEY\": `${process.env.BAGEL_API_KEY}`,\r\n                            },\r\n                        }\r\n                    );\r\n\r\n                    if (!fileResponse.ok) {\r\n                        throw new Error(\r\n                            `API responded with status ${fileResponse.status}: ${await fileResponse.text()}`\r\n                        );\r\n                    }\r\n\r\n                    console.log(\"Response headers:\", fileResponse.headers);\r\n\r\n                    const fileName =\r\n                        fileResponse.headers\r\n                            .get(\"content-disposition\")\r\n                            ?.split(\"filename=\")[1]\r\n                            ?.replace(/\"/g, \"\") || \"default_name.txt\";\r\n\r\n                    console.log(\"Saving as:\", fileName);\r\n\r\n                    const arrayBuffer = await fileResponse.arrayBuffer();\r\n                    const buffer = Buffer.from(arrayBuffer);\r\n\r\n                    const filePath = path.join(downloadDir, fileName);\r\n                    console.log(\"Full file path:\", filePath);\r\n\r\n                    await fs.promises.writeFile(filePath, buffer);\r\n\r\n                    // Verify file was written\r\n                    const stats = await fs.promises.stat(filePath);\r\n                    console.log(\r\n                        \"File written successfully. Size:\",\r\n                        stats.size,\r\n                        \"bytes\"\r\n                    );\r\n\r\n                    res.json({\r\n                        success: true,\r\n                        message: \"Single file downloaded successfully\",\r\n                        downloadPath: downloadDir,\r\n                        fileCount: 1,\r\n                        fileName: fileName,\r\n                        fileSize: stats.size,\r\n                    });\r\n                } catch (error) {\r\n                    console.error(\"Detailed error:\", error);\r\n                    res.status(500).json({\r\n                        error: \"Failed to download files from BagelDB\",\r\n                        details: error.message,\r\n                        stack: error.stack,\r\n                    });\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    public registerAgent(runtime: AgentRuntime) {\r\n        this.agents.set(runtime.agentId, runtime);\r\n    }\r\n\r\n    public unregisterAgent(runtime: AgentRuntime) {\r\n        this.agents.delete(runtime.agentId);\r\n    }\r\n\r\n    public start(port: number) {\r\n        this.server = this.app.listen(port, () => {\r\n            elizaLogger.success(`Server running at http://localhost:${port}/`);\r\n        });\r\n\r\n        // Handle graceful shutdown\r\n        const gracefulShutdown = () => {\r\n            elizaLogger.log(\"Received shutdown signal, closing server...\");\r\n            this.server.close(() => {\r\n                elizaLogger.success(\"Server closed successfully\");\r\n                process.exit(0);\r\n            });\r\n\r\n            // Force close after 5 seconds if server hasn't closed\r\n            setTimeout(() => {\r\n                elizaLogger.error(\r\n                    \"Could not close connections in time, forcefully shutting down\"\r\n                );\r\n                process.exit(1);\r\n            }, 5000);\r\n        };\r\n\r\n        // Handle different shutdown signals\r\n        process.on(\"SIGTERM\", gracefulShutdown);\r\n        process.on(\"SIGINT\", gracefulShutdown);\r\n    }\r\n\r\n    public stop() {\r\n        if (this.server) {\r\n            this.server.close(() => {\r\n                elizaLogger.success(\"Server stopped\");\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const DirectClientInterface: Client = {\r\n    start: async (_runtime: IAgentRuntime) => {\r\n        elizaLogger.log(\"DirectClientInterface start\");\r\n        const client = new DirectClient();\r\n        const serverPort = parseInt(settings.SERVER_PORT || \"3000\");\r\n        client.start(serverPort);\r\n        return client;\r\n    },\r\n    stop: async (_runtime: IAgentRuntime, client?: any) => {\r\n        if (client instanceof DirectClient) {\r\n            client.stop();\r\n        }\r\n    },\r\n};\r\n\r\nexport default DirectClientInterface;\r\n","import express from \"express\";\r\nimport bodyParser from \"body-parser\";\r\nimport cors from \"cors\";\r\n\r\nimport { AgentRuntime } from \"@ai16z/eliza\";\r\n\r\nimport { REST, Routes } from \"discord.js\";\r\n\r\nexport function createApiRouter(agents: Map<string, AgentRuntime>) {\r\n    const router = express.Router();\r\n\r\n    router.use(cors());\r\n    router.use(bodyParser.json());\r\n    router.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n    router.get(\"/hello\", (req, res) => {\r\n        res.json({ message: \"Hello World!\" });\r\n    });\r\n\r\n    router.get(\"/agents\", (req, res) => {\r\n        const agentsList = Array.from(agents.values()).map((agent) => ({\r\n            id: agent.agentId,\r\n            name: agent.character.name,\r\n        }));\r\n        res.json({ agents: agentsList });\r\n    });\r\n\r\n    router.get(\"/agents/:agentId\", (req, res) => {\r\n        const agentId = req.params.agentId;\r\n        const agent = agents.get(agentId);\r\n\r\n        if (!agent) {\r\n            res.status(404).json({ error: \"Agent not found\" });\r\n            return;\r\n        }\r\n\r\n        res.json({\r\n            id: agent.agentId,\r\n            character: agent.character,\r\n        });\r\n    });\r\n\r\n    router.get(\"/agents/:agentId/channels\", async (req, res) => {\r\n        const agentId = req.params.agentId;\r\n        const runtime = agents.get(agentId);\r\n\r\n        if (!runtime) {\r\n            res.status(404).json({ error: \"Runtime not found\" });\r\n            return;\r\n        }\r\n\r\n        const API_TOKEN = runtime.getSetting(\"DISCORD_API_TOKEN\") as string;\r\n        const rest = new REST({ version: \"10\" }).setToken(API_TOKEN);\r\n\r\n        try {\r\n            const guilds = (await rest.get(Routes.userGuilds())) as Array<any>;\r\n\r\n            res.json({\r\n                id: runtime.agentId,\r\n                guilds: guilds,\r\n                serverCount: guilds.length,\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Error fetching guilds:\", error);\r\n            res.status(500).json({ error: \"Failed to fetch guilds\" });\r\n        }\r\n    });\r\n\r\n    return router;\r\n}\r\n"],"mappings":"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","names":["bodyParser","cors","express","express","cors","bodyParser"]}