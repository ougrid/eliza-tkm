{"version":3,"sources":["../src/actions/bridge.ts","../src/providers/wallet.ts","../src/templates/index.ts","../src/actions/swap.ts","../src/actions/transfer.ts","../src/index.ts"],"sourcesContent":["import type { IAgentRuntime, Memory, State } from \"@ai16z/eliza\";\r\nimport {\r\n    ChainId,\r\n    createConfig,\r\n    executeRoute,\r\n    ExtendedChain,\r\n    getRoutes,\r\n} from \"@lifi/sdk\";\r\nimport { getChainConfigs, WalletProvider } from \"../providers/wallet\";\r\nimport { bridgeTemplate } from \"../templates\";\r\nimport type { BridgeParams, Transaction } from \"../types\";\r\n\r\nexport { bridgeTemplate };\r\n\r\nexport class BridgeAction {\r\n    private config;\r\n\r\n    constructor(private walletProvider: WalletProvider) {\r\n        this.config = createConfig({\r\n            integrator: \"eliza\",\r\n            chains: Object.values(\r\n                getChainConfigs(this.walletProvider.runtime)\r\n            ).map((config) => ({\r\n                id: config.chainId,\r\n                name: config.name,\r\n                key: config.name.toLowerCase(),\r\n                chainType: \"EVM\",\r\n                nativeToken: {\r\n                    ...config.nativeCurrency,\r\n                    chainId: config.chainId,\r\n                    address: \"0x0000000000000000000000000000000000000000\",\r\n                    coinKey: config.nativeCurrency.symbol,\r\n                },\r\n                metamask: {\r\n                    chainId: `0x${config.chainId.toString(16)}`,\r\n                    chainName: config.name,\r\n                    nativeCurrency: config.nativeCurrency,\r\n                    rpcUrls: [config.rpcUrl],\r\n                    blockExplorerUrls: [config.blockExplorerUrl],\r\n                },\r\n                diamondAddress: \"0x0000000000000000000000000000000000000000\",\r\n                coin: config.nativeCurrency.symbol,\r\n                mainnet: true,\r\n            })) as ExtendedChain[],\r\n        });\r\n    }\r\n\r\n    async bridge(params: BridgeParams): Promise<Transaction> {\r\n        const walletClient = this.walletProvider.getWalletClient();\r\n        const [fromAddress] = await walletClient.getAddresses();\r\n\r\n        const routes = await getRoutes({\r\n            fromChainId: getChainConfigs(this.walletProvider.runtime)[\r\n                params.fromChain\r\n            ].chainId as ChainId,\r\n            toChainId: getChainConfigs(this.walletProvider.runtime)[\r\n                params.toChain\r\n            ].chainId as ChainId,\r\n            fromTokenAddress: params.fromToken,\r\n            toTokenAddress: params.toToken,\r\n            fromAmount: params.amount,\r\n            fromAddress: fromAddress,\r\n            toAddress: params.toAddress || fromAddress,\r\n        });\r\n\r\n        if (!routes.routes.length) throw new Error(\"No routes found\");\r\n\r\n        const execution = await executeRoute(routes.routes[0], this.config);\r\n        const process = execution.steps[0]?.execution?.process[0];\r\n\r\n        if (!process?.status || process.status === \"FAILED\") {\r\n            throw new Error(\"Transaction failed\");\r\n        }\r\n\r\n        return {\r\n            hash: process.txHash as `0x${string}`,\r\n            from: fromAddress,\r\n            to: routes.routes[0].steps[0].estimate\r\n                .approvalAddress as `0x${string}`,\r\n            value: BigInt(params.amount),\r\n            chainId: getChainConfigs(this.walletProvider.runtime)[\r\n                params.fromChain\r\n            ].chainId,\r\n        };\r\n    }\r\n}\r\n\r\nexport const bridgeAction = {\r\n    name: \"bridge\",\r\n    description: \"Bridge tokens between different chains\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any\r\n    ) => {\r\n        const walletProvider = new WalletProvider(runtime);\r\n        const action = new BridgeAction(walletProvider);\r\n        return action.bridge(options);\r\n    },\r\n    template: bridgeTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\r\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Bridge 1 ETH from Ethereum to Base\",\r\n                    action: \"CROSS_CHAIN_TRANSFER\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"CROSS_CHAIN_TRANSFER\", \"CHAIN_BRIDGE\", \"MOVE_CROSS_CHAIN\"],\r\n}; // TODO: add more examples / similies\r\n","import type { IAgentRuntime, Provider, Memory, State } from \"@ai16z/eliza\";\r\nimport {\r\n    createPublicClient,\r\n    createWalletClient,\r\n    http,\r\n    formatUnits,\r\n    type PublicClient,\r\n    type WalletClient,\r\n    type Chain,\r\n    type HttpTransport,\r\n    type Address,\r\n    Account,\r\n} from \"viem\";\r\nimport { mainnet, base } from \"viem/chains\";\r\nimport type { SupportedChain, ChainConfig, ChainMetadata } from \"../types\";\r\nimport { privateKeyToAccount } from \"viem/accounts\";\r\n\r\nexport const DEFAULT_CHAIN_CONFIGS: Record<SupportedChain, ChainMetadata> = {\r\n    ethereum: {\r\n        chainId: 1,\r\n        name: \"Ethereum\",\r\n        chain: mainnet,\r\n        rpcUrl: \"https://eth.llamarpc.com\",\r\n        nativeCurrency: {\r\n            name: \"Ether\",\r\n            symbol: \"ETH\",\r\n            decimals: 18,\r\n        },\r\n        blockExplorerUrl: \"https://etherscan.io\",\r\n    },\r\n    base: {\r\n        chainId: 8453,\r\n        name: \"Base\",\r\n        chain: base,\r\n        rpcUrl: \"https://base.llamarpc.com\",\r\n        nativeCurrency: {\r\n            name: \"Ether\",\r\n            symbol: \"ETH\",\r\n            decimals: 18,\r\n        },\r\n        blockExplorerUrl: \"https://basescan.org\",\r\n    },\r\n} as const;\r\n\r\nexport const getChainConfigs = (runtime: IAgentRuntime) => {\r\n    return (\r\n        (runtime.character.settings.chains?.evm as ChainConfig[]) ||\r\n        DEFAULT_CHAIN_CONFIGS\r\n    );\r\n};\r\n\r\nexport class WalletProvider {\r\n    private chainConfigs: Record<SupportedChain, ChainConfig>;\r\n    private currentChain: SupportedChain = \"ethereum\";\r\n    private address: Address;\r\n    runtime: IAgentRuntime;\r\n\r\n    constructor(runtime: IAgentRuntime) {\r\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\r\n        if (!privateKey) throw new Error(\"EVM_PRIVATE_KEY not configured\");\r\n\r\n        this.runtime = runtime;\r\n\r\n        const account = privateKeyToAccount(privateKey as `0x${string}`);\r\n        this.address = account.address;\r\n\r\n        const createClients = (chain: SupportedChain): ChainConfig => {\r\n            const transport = http(getChainConfigs(runtime)[chain].rpcUrl);\r\n            return {\r\n                chain: getChainConfigs(runtime)[chain].chain,\r\n                publicClient: createPublicClient<HttpTransport>({\r\n                    chain: getChainConfigs(runtime)[chain].chain,\r\n                    transport,\r\n                }) as PublicClient<HttpTransport, Chain, Account | undefined>,\r\n                walletClient: createWalletClient<HttpTransport>({\r\n                    chain: getChainConfigs(runtime)[chain].chain,\r\n                    transport,\r\n                    account,\r\n                }),\r\n            };\r\n        };\r\n\r\n        this.chainConfigs = {\r\n            ethereum: createClients(\"ethereum\"),\r\n            base: createClients(\"base\"),\r\n        };\r\n    }\r\n\r\n    getAddress(): Address {\r\n        return this.address;\r\n    }\r\n\r\n    async getWalletBalance(): Promise<string | null> {\r\n        try {\r\n            const client = this.getPublicClient(this.currentChain);\r\n            const walletClient = this.getWalletClient();\r\n            const balance = await client.getBalance({\r\n                address: walletClient.account.address,\r\n            });\r\n            return formatUnits(balance, 18);\r\n        } catch (error) {\r\n            console.error(\"Error getting wallet balance:\", error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async connect(): Promise<`0x${string}`> {\r\n        return this.runtime.getSetting(\"EVM_PRIVATE_KEY\") as `0x${string}`;\r\n    }\r\n\r\n    async switchChain(\r\n        runtime: IAgentRuntime,\r\n        chain: SupportedChain\r\n    ): Promise<void> {\r\n        const walletClient = this.chainConfigs[this.currentChain].walletClient;\r\n        if (!walletClient) throw new Error(\"Wallet not connected\");\r\n\r\n        try {\r\n            await walletClient.switchChain({\r\n                id: getChainConfigs(runtime)[chain].chainId,\r\n            });\r\n        } catch (error: any) {\r\n            if (error.code === 4902) {\r\n                console.log(\r\n                    \"[WalletProvider] Chain not added to wallet (error 4902) - attempting to add chain first\"\r\n                );\r\n                await walletClient.addChain({\r\n                    chain: {\r\n                        ...getChainConfigs(runtime)[chain].chain,\r\n                        rpcUrls: {\r\n                            default: {\r\n                                http: [getChainConfigs(runtime)[chain].rpcUrl],\r\n                            },\r\n                            public: {\r\n                                http: [getChainConfigs(runtime)[chain].rpcUrl],\r\n                            },\r\n                        },\r\n                    },\r\n                });\r\n                await walletClient.switchChain({\r\n                    id: getChainConfigs(runtime)[chain].chainId,\r\n                });\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        this.currentChain = chain;\r\n    }\r\n\r\n    getPublicClient(\r\n        chain: SupportedChain\r\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\r\n        return this.chainConfigs[chain].publicClient;\r\n    }\r\n\r\n    getWalletClient(): WalletClient {\r\n        const walletClient = this.chainConfigs[this.currentChain].walletClient;\r\n        if (!walletClient) throw new Error(\"Wallet not connected\");\r\n        return walletClient;\r\n    }\r\n\r\n    getCurrentChain(): SupportedChain {\r\n        return this.currentChain;\r\n    }\r\n\r\n    getChainConfig(chain: SupportedChain) {\r\n        return getChainConfigs(this.runtime)[chain];\r\n    }\r\n}\r\n\r\nexport const evmWalletProvider: Provider = {\r\n    async get(\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state?: State\r\n    ): Promise<string | null> {\r\n        // Check if the user has an EVM wallet\r\n        if (!runtime.getSetting(\"EVM_PRIVATE_KEY\")) {\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            const walletProvider = new WalletProvider(runtime);\r\n            const address = walletProvider.getAddress();\r\n            const balance = await walletProvider.getWalletBalance();\r\n            return `EVM Wallet Address: ${address}\\nBalance: ${balance} ETH`;\r\n        } catch (error) {\r\n            console.error(\"Error in EVM wallet provider:\", error);\r\n            return null;\r\n        }\r\n    },\r\n};\r\n","export const transferTemplate = `Given the recent messages and wallet information below:\r\n\r\n{{recentMessages}}\r\n\r\n{{walletInfo}}\r\n\r\nExtract the following information about the requested transfer:\r\n- Chain to execute on (ethereum or base)\r\n- Amount to transfer\r\n- Recipient address\r\n- Token symbol or address (if not native token)\r\n\r\nRespond with a JSON markdown block containing only the extracted values:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"chain\": \"ethereum\" | \"base\" | null,\r\n    \"amount\": string | null,\r\n    \"toAddress\": string | null,\r\n    \"token\": string | null\r\n}\r\n\\`\\`\\`\r\n`;\r\n\r\nexport const bridgeTemplate = `Given the recent messages and wallet information below:\r\n\r\n{{recentMessages}}\r\n\r\n{{walletInfo}}\r\n\r\nExtract the following information about the requested token bridge:\r\n- Token symbol or address to bridge\r\n- Source chain (ethereum or base)\r\n- Destination chain (ethereum or base)\r\n- Amount to bridge\r\n- Destination address (if specified)\r\n\r\nRespond with a JSON markdown block containing only the extracted values:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"token\": string | null,\r\n    \"fromChain\": \"ethereum\" | \"base\" | null,\r\n    \"toChain\": \"ethereum\" | \"base\" | null,\r\n    \"amount\": string | null,\r\n    \"toAddress\": string | null\r\n}\r\n\\`\\`\\`\r\n`;\r\n\r\nexport const swapTemplate = `Given the recent messages and wallet information below:\r\n\r\n{{recentMessages}}\r\n\r\n{{walletInfo}}\r\n\r\nExtract the following information about the requested token swap:\r\n- Input token symbol or address (the token being sold)\r\n- Output token symbol or address (the token being bought)\r\n- Amount to swap\r\n- Chain to execute on (ethereum or base)\r\n\r\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\r\n\r\n\\`\\`\\`json\r\n{\r\n    \"inputToken\": string | null,\r\n    \"outputToken\": string | null,\r\n    \"amount\": string | null,\r\n    \"chain\": \"ethereum\" | \"base\" | null,\r\n    \"slippage\": number | null\r\n}\r\n\\`\\`\\`\r\n`;\r\n","import type { IAgentRuntime, Memory, State } from \"@ai16z/eliza\";\r\nimport {\r\n    ChainId,\r\n    createConfig,\r\n    executeRoute,\r\n    ExtendedChain,\r\n    getRoutes,\r\n} from \"@lifi/sdk\";\r\nimport { getChainConfigs, WalletProvider } from \"../providers/wallet\";\r\nimport { swapTemplate } from \"../templates\";\r\nimport type { SwapParams, Transaction } from \"../types\";\r\n\r\nexport { swapTemplate };\r\n\r\nexport class SwapAction {\r\n    private config;\r\n\r\n    constructor(private walletProvider: WalletProvider) {\r\n        this.config = createConfig({\r\n            integrator: \"eliza\",\r\n            chains: Object.values(\r\n                getChainConfigs(this.walletProvider.runtime)\r\n            ).map((config) => ({\r\n                id: config.chainId,\r\n                name: config.name,\r\n                key: config.name.toLowerCase(),\r\n                chainType: \"EVM\" as const,\r\n                nativeToken: {\r\n                    ...config.nativeCurrency,\r\n                    chainId: config.chainId,\r\n                    address: \"0x0000000000000000000000000000000000000000\",\r\n                    coinKey: config.nativeCurrency.symbol,\r\n                    priceUSD: \"0\",\r\n                    logoURI: \"\",\r\n                    symbol: config.nativeCurrency.symbol,\r\n                    decimals: config.nativeCurrency.decimals,\r\n                    name: config.nativeCurrency.name,\r\n                },\r\n                rpcUrls: {\r\n                    public: { http: [config.rpcUrl] },\r\n                },\r\n                blockExplorerUrls: [config.blockExplorerUrl],\r\n                metamask: {\r\n                    chainId: `0x${config.chainId.toString(16)}`,\r\n                    chainName: config.name,\r\n                    nativeCurrency: config.nativeCurrency,\r\n                    rpcUrls: [config.rpcUrl],\r\n                    blockExplorerUrls: [config.blockExplorerUrl],\r\n                },\r\n                coin: config.nativeCurrency.symbol,\r\n                mainnet: true,\r\n                diamondAddress: \"0x0000000000000000000000000000000000000000\",\r\n            })) as ExtendedChain[],\r\n        });\r\n    }\r\n\r\n    async swap(params: SwapParams): Promise<Transaction> {\r\n        const walletClient = this.walletProvider.getWalletClient();\r\n        const [fromAddress] = await walletClient.getAddresses();\r\n\r\n        const routes = await getRoutes({\r\n            fromChainId: getChainConfigs(this.walletProvider.runtime)[\r\n                params.chain\r\n            ].chainId as ChainId,\r\n            toChainId: getChainConfigs(this.walletProvider.runtime)[\r\n                params.chain\r\n            ].chainId as ChainId,\r\n            fromTokenAddress: params.fromToken,\r\n            toTokenAddress: params.toToken,\r\n            fromAmount: params.amount,\r\n            fromAddress: fromAddress,\r\n            options: {\r\n                slippage: params.slippage || 0.5,\r\n                order: \"RECOMMENDED\",\r\n            },\r\n        });\r\n\r\n        if (!routes.routes.length) throw new Error(\"No routes found\");\r\n\r\n        const execution = await executeRoute(routes.routes[0], this.config);\r\n        const process = execution.steps[0]?.execution?.process[0];\r\n\r\n        if (!process?.status || process.status === \"FAILED\") {\r\n            throw new Error(\"Transaction failed\");\r\n        }\r\n\r\n        return {\r\n            hash: process.txHash as `0x${string}`,\r\n            from: fromAddress,\r\n            to: routes.routes[0].steps[0].estimate\r\n                .approvalAddress as `0x${string}`,\r\n            value: BigInt(params.amount),\r\n            data: process.data as `0x${string}`,\r\n            chainId: getChainConfigs(this.walletProvider.runtime)[params.chain]\r\n                .chainId,\r\n        };\r\n    }\r\n}\r\n\r\nexport const swapAction = {\r\n    name: \"swap\",\r\n    description: \"Swap tokens on the same chain\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any,\r\n        callback?: any\r\n    ) => {\r\n        try {\r\n            const walletProvider = new WalletProvider(runtime);\r\n            const action = new SwapAction(walletProvider);\r\n            return await action.swap(options);\r\n        } catch (error) {\r\n            console.error(\"Error in swap handler:\", error.message);\r\n            if (callback) {\r\n                callback({ text: `Error: ${error.message}` });\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    template: swapTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\r\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Swap 1 ETH for USDC on Base\",\r\n                    action: \"TOKEN_SWAP\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"TOKEN_SWAP\", \"EXCHANGE_TOKENS\", \"TRADE_TOKENS\"],\r\n}; // TODO: add more examples\r\n","import { ByteArray, parseEther, type Hex } from \"viem\";\r\nimport { WalletProvider } from \"../providers/wallet\";\r\nimport type { Transaction, TransferParams } from \"../types\";\r\nimport { transferTemplate } from \"../templates\";\r\nimport type { IAgentRuntime, Memory, State } from \"@ai16z/eliza\";\r\n\r\nexport { transferTemplate };\r\nexport class TransferAction {\r\n    constructor(private walletProvider: WalletProvider) {}\r\n\r\n    async transfer(\r\n        runtime: IAgentRuntime,\r\n        params: TransferParams\r\n    ): Promise<Transaction> {\r\n        const walletClient = this.walletProvider.getWalletClient();\r\n        const [fromAddress] = await walletClient.getAddresses();\r\n\r\n        await this.walletProvider.switchChain(runtime, params.fromChain);\r\n\r\n        try {\r\n            const hash = await walletClient.sendTransaction({\r\n                account: fromAddress,\r\n                to: params.toAddress,\r\n                value: parseEther(params.amount),\r\n                data: params.data as Hex,\r\n                kzg: {\r\n                    blobToKzgCommitment: function (blob: ByteArray): ByteArray {\r\n                        throw new Error(\"Function not implemented.\");\r\n                    },\r\n                    computeBlobKzgProof: function (\r\n                        blob: ByteArray,\r\n                        commitment: ByteArray\r\n                    ): ByteArray {\r\n                        throw new Error(\"Function not implemented.\");\r\n                    },\r\n                },\r\n                chain: undefined,\r\n            });\r\n\r\n            return {\r\n                hash,\r\n                from: fromAddress,\r\n                to: params.toAddress,\r\n                value: parseEther(params.amount),\r\n                data: params.data as Hex,\r\n            };\r\n        } catch (error) {\r\n            throw new Error(`Transfer failed: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport const transferAction = {\r\n    name: \"transfer\",\r\n    description: \"Transfer tokens between addresses on the same chain\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        options: any\r\n    ) => {\r\n        const walletProvider = new WalletProvider(runtime);\r\n        const action = new TransferAction(walletProvider);\r\n        return action.transfer(runtime, options);\r\n    },\r\n    template: transferTemplate,\r\n    validate: async (runtime: IAgentRuntime) => {\r\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\r\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\r\n    },\r\n    examples: [\r\n        [\r\n            {\r\n                user: \"assistant\",\r\n                content: {\r\n                    text: \"I'll help you transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\r\n                    action: \"SEND_TOKENS\",\r\n                },\r\n            },\r\n            {\r\n                user: \"user\",\r\n                content: {\r\n                    text: \"Transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\r\n                    action: \"SEND_TOKENS\",\r\n                },\r\n            },\r\n        ],\r\n    ],\r\n    similes: [\"SEND_TOKENS\", \"TOKEN_TRANSFER\", \"MOVE_TOKENS\"],\r\n};\r\n","export * from \"./actions/bridge\";\r\nexport * from \"./actions/swap\";\r\nexport * from \"./actions/transfer\";\r\nexport * from \"./providers/wallet\";\r\nexport * from \"./types\";\r\n\r\nimport type { Plugin } from \"@ai16z/eliza\";\r\nimport { bridgeAction } from \"./actions/bridge\";\r\nimport { swapAction } from \"./actions/swap\";\r\nimport { transferAction } from \"./actions/transfer\";\r\nimport { evmWalletProvider } from \"./providers/wallet\";\r\n\r\nexport const evmPlugin: Plugin = {\r\n    name: \"evm\",\r\n    description: \"EVM blockchain integration plugin\",\r\n    providers: [evmWalletProvider],\r\n    evaluators: [],\r\n    services: [],\r\n    actions: [transferAction, bridgeAction, swapAction],\r\n};\r\n\r\nexport default evmPlugin;\r\n"],"mappings":"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","names":["createConfig","executeRoute","getRoutes","createConfig","getRoutes","executeRoute"]}